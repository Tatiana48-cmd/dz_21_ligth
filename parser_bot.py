import os
import json
import time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CACHE_FILE = 'news_cache.json'
CACHE_EXPIRE_SEC = 3600  # 1 —á–∞—Å
MAX_NEWS_TO_SHOW = 15

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
try:
    from dotenv import load_dotenv

    load_dotenv()
    BOT_TOKEN = os.getenv("token")
except:
    BOT_TOKEN = os.environ.get("token")


def init_cache():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –∫–µ—à–∞"""
    return {
        'last_update': 0,
        'news': {
            'data': [],
            'total_count': 0,
            'timestamp': 0
        }
    }


def load_cache():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–∞ –∏–∑ —Ñ–∞–π–ª–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if not os.path.exists(CACHE_FILE):
        return init_cache()

    try:
        with open(CACHE_FILE, 'r', encoding='utf-8') as f:
            cache = json.load(f)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if 'last_update' not in cache or 'news' not in cache:
                return init_cache()
            return cache
    except:
        return init_cache()


def save_cache(cache):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–∞ –≤ —Ñ–∞–π–ª"""
    with open(CACHE_FILE, 'w', encoding='utf-8') as f:
        json.dump(cache, f, ensure_ascii=False, indent=2)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞
cache = load_cache()
current_news = cache['news']  # –¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = [["/start", "/help"], ["/parserbot", "/novosty"]]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì°–ü—Ä–∏–≤–µ—Å—Ç–≤—É—é –≤–∞—Å! –ë–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞—É–∫–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/parserbot - –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n"
        "/novosty - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"
    )
    await update.message.reply_text(text, parse_mode="HTML")


async def parser_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global cache, current_news

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if time.time() - cache['last_update'] < CACHE_EXPIRE_SEC:
            await update.message.reply_text("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏")
            return

        await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")

        from main import parse_news
        success, count = parse_news()

        if success:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            with open('news_february.json', 'r', encoding='utf-8') as f:
                new_data = json.load(f)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            cache['last_update'] = time.time()
            cache['news'] = new_data
            current_news = new_data
            save_cache(cache)

            await update.message.reply_text(
                f"‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n"
                f"üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {count}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time.strftime('%H:%M', time.localtime())}",
                parse_mode="HTML"
            )
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        print(f"[–û—à–∏–±–∫–∞ –±–æ—Ç–∞] {str(e)}")


async def show_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_news

    if not current_news['data']:
        await update.message.reply_text("üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /parserbot")
        return

    total = current_news['total_count']
    to_show = min(total, MAX_NEWS_TO_SHOW)
    last_update = time.strftime('%d.%m.%Y %H:%M', time.localtime(cache['last_update']))

    response = (
        f"üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {last_update}\n"
        f"üìä <b>–ù–∞–π–¥–µ–Ω–æ:</b> {total}\n"
        f"üîç <b>–ü–æ–∫–∞–∑–∞–Ω–æ:</b> {to_show}\n\n"
    )

    for idx, item in enumerate(current_news['data'][:to_show], 1):
        title = item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').replace('<', '&lt;').replace('>', '&gt;')
        link = item.get('link', '')
        text = item.get('text', '')[:100].replace('<', '&lt;').replace('>', '&gt;')

        link_part = f"<a href=\"{link}\">üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n" if link.startswith('http') else ""
        response += f"<b>{idx}. {title}</b>\n{link_part}{text}...\n\n"

    try:
        await update.message.reply_text(
            response,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –Ω–æ–≤–æ—Å—Ç–µ–π")
        print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏] {str(e)}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help))
    app.add_handler(CommandHandler("parserbot", parser_bot))
    app.add_handler(CommandHandler("novosty", show_news))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(lambda u, c: print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {c.error}"))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()